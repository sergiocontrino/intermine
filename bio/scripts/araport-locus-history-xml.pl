#!/usr/bin/env perl
use strict;
use warnings;

use InterMine::Item::Document;
use InterMine::Model;

my $usage = <<USAGE;
usage: $0 /path/to/locushistory.txt /path/to/YOURMINE/dbmodel/build/model/genomic_model.xml

This script takes an input a tab-delimited text file containing information
about the history of a gene locus, the kind of modification which was performed
(gene split, merge, obsolete, etc.), date the locusOperation was performed and the
source of the information.

The input file format adheres to the TAIR locushistory files generated alongwith
every annotation release.

The format of the text file is 5-column, tab-delimited, as follows:

     (1)           (2)              (3)             (4)                 (5)*
    Gene       Data Source       Locus Operation       Datestamp       Other Genes Involved

As an example, if the input was:

    AT1G01073      Araport        obsolete       20150917
    AT1G01073      TAIR           insert         20090427

The resultant XML produced by this script would be like so:

    <item id="0_9" class="DataSource" implements="">
       <attribute name="name" value="TAIR" />
    </item>
    <item id="0_17" class="DataSource" implements="">
       <attribute name="name" value="Araport" />
    </item>
    <item id="0_18" class="Gene" implements="">
       <attribute name="primaryIdentifier" value="AT1G01073" />
       <collection name="locusHistory">
          <reference ref_id="0_59585" />
          <reference ref_id="0_59586" />
       </collection>
       <attribute name="isObsolete" value="true" />
    </item>
    <item id="0_59585" class="LocusHistory" implements="">
       <reference name="source" ref_id="0_17" />
       <attribute name="datestamp" value="20150917" />
       <attribute name="locusOperation" value="obsolete" />
    </item>
    <item id="0_59586" class="LocusHistory" implements="">
       <reference name="source" ref_id="0_9" />
       <attribute name="datestamp" value="20090427" />
       <attribute name="locusOperation" value="insert" />
    </item>

Normally, the script is invoked like so from the intermine root directory
(please replace the string "YOURMINE" with the name of your mine project).

    perl bio/scripts/araport-locus-history-xml.pl \
        /path/to/your/locushistory.txt YOURMINE/dbmodel/build/model/genomic_model.xml \
        > /path/to/your/araport-locus-history.xml

This script relies on the merged InterMine model XML file available in the build
directory. This is generated by running the following ant command:

    cd /path/to/YOURMINE/dbmodel && ant clean build-db

***Please note: above command will destroy any existing data in the database

Once the `locushistory.xml` file has been generated, the following set of files
are to be configured like so (please replace the string "YOURMINE" with the
name of your mine project):

(1) Set up a new intermine-items-xml-file data source in YOURMINE/project.xml:

    <source name="araport-locus-history" type="intermine-items-xml-file">
      <property name="src.data.file" location="/path/to/your/araport-locus-history.xml"/>
    </source>

(2) Set up a YOURMINE/integrate/resources/araport-locus-history_keys.properties file:

    LocusHistory.key_source_operation_date = source, locusOperation, datestamp

(3) Update YOURMINE/dbmodel/genomic_priorities.properties to set priorities for
    the data from the `locushistory.xml` file:

    DataSource.name = *, araport-locus-history

USAGE

# print out usage if locushistory txt file and/or genomic_model.xml file are not provided
die $usage if (@ARGV < 2);

my ($locushistory_file, $model_file) = @ARGV;

my %data  = ();
my $model = new InterMine::Model(file => $model_file);
my $doc   = new InterMine::Item::Document(model => $model);

my ($prev, $curr) = ("", undef);
open HISTORY, "<", $locushistory_file or die "Error: unable to open file: $!\n";
while (<HISTORY>) {
    chomp;
    my @line = split /\t/;

    # skip any lines with empty locusOperations
    next if (scalar @line < 4);

    $curr = uc $line[0];
    my $source = $line[1];
    my $modOp = ($line[2] ne "") ? $line[2] : "not in use";
    my $date = ($line[3] =~ /\d{8,8}/) ? $line[3] : "YYYYMMDD";

    # process the data source references first
    $data{'DataSource'}{$source} = make_item('DataSource' => (name => $source))
        if (not defined $data{'DataSource'}{$source});

    # proocess all the gene references next
    my $class = 'Gene';
    my @refs = ();
    my @genes = ($curr);
    push @genes, uc $line[4] if(scalar @line == 5);
    foreach my $gene(@genes) {
        $data{$class}{$gene} = make_item($class => (primaryIdentifier => $gene))
            if (not defined $data{$class}{$gene});
    }

    # process and store the locus status (isObsolete: true or false)
    $data{$class}{$curr}->set('isObsolete' =>
        ($modOp =~ /obsolete|not in use/) ? "true" : "false") if ($curr ne $prev);

    # finally, process all locus modifications
    $class = 'LocusHistory';
    my $modOpKey = "$source-$modOp-$date";
    @{ $data{$class}{$curr}{$modOpKey} } =  ()
        if not defined ($data{$class}{$curr}{$modOpKey});

    push @{ $data{$class}{$curr}{$modOpKey} }, $data{'Gene'}{uc $line[4]}
        if (scalar @line == 5);

    $prev = $curr;
}
close HISTORY;

# set appropriate collections
my $class = 'LocusHistory';
foreach my $locus(keys %{ $data{$class} }) {
    my @items = ();
    foreach my $modOpKey(keys %{ $data{$class}{$locus} }) {
        my @line = split /-/, $modOpKey;
        my $item = make_item(
            $class => (
                source => $data{'DataSource'}{$line[0]},
                locusOperation => $line[1],
                datestamp => $line[2]
            ));
        $item->set(lociInvolved => \@{ $data{$class}{$locus}{$modOpKey} })
                if (scalar @{ $data{$class}{$locus}{$modOpKey} } > 0);
        push @items, $item;
    }
    $data{'Gene'}{$locus}->set(locusHistory => \@items) if (scalar @items > 0);
}

$doc->close();    # write the xml
exit(0);

######### helper subroutines:

sub make_item {
    my @args = @_;
    my $item = $doc->add_item(@args);
    return $item;
}
